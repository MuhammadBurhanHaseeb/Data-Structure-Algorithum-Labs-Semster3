/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        
        queue<TreeNode*> q;
        q.push(root);
        vector<int> v1;
        vector<int> v2;
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {

        if(root == NULL)
        {
            root = createNode(val);
        }
        else
        {
            TreeNode* prev = root;
            TreeNode* next = root;
            while(next != NULL)
            {
                prev = next;
                if(val < next->val)
                {
                    if(prev->left != NULL)
                    {
                        next = prev->left;
                    }
                    else
                    {
                        prev->left = createNode(val);
                        return root;
                    }
                }
                else
                {
                    if(prev->right != NULL)
                    {
                        next = prev->right;
                    }
                    else
                    {
                        prev->right = createNode(val);
                        return root;
                    }
                }
            }
        }
        return root;
    }
    TreeNode *createNode(int value)
    {
        TreeNode *record = new TreeNode();
        record->val = value;
        record->left = NULL;
        record->right = NULL;
        return record;
    }
};